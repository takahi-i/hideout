import os
import pickle
from typing import Callable, Dict

from hideout import env
from hideout.file import freeze, generate_path, generate_path_for_decorator
from hideout.log import logger


class Keeper:
    """
    Load and save the given object
    """

    def __init__(self, stage: str = None):
        """
        Constructor.

        Parameters
        ----------
        stage : str
            Stage of program.
        """
        self.stage = stage
        logger.info("HIDEOUT_ENABLE_CACHE is set to {}...".format(env.HIDEOUT_ENABLE_CACHE))
        logger.info("HIDEOUT_SKIP_STAGES is set to {}...".format(env.HIDEOUT_SKIP_STAGES))

    def resume_or_generate(self, func: Callable, func_args: Dict, label: str = None) -> object:
        """
        Returns the object generated from func with func_args parameters. When exist the cache file
        containing target object, resume method does not given func and load the object from cache
        file.

        Parameters
        ----------
        func : Callable
            function to generate result object
        func_args : Dict
            parameters of the func.
        label : str
            Prefix of the cache file generated by hideout.

        Returns
        -------
        object : object
        """
        file_path = generate_path(func, func_args, label)
        if env.HIDEOUT_ENABLE_CACHE and self.stage not in env.HIDEOUT_SKIP_STAGES:
            logger.info("specified cache file: {}".format(file_path))
            if os.path.exists(file_path):
                logger.info("found {} ...".format(file_path))
                with open(file_path, mode='rb') as f:
                    return pickle.load(f)
            else:
                logger.info("not found cache file...")
        logger.info("generating with func")
        return self._generate_from_function(file_path, func, func_args)

    def resume_or_generate_for_decorator(self,
                                         func: Callable,
                                         args: list,
                                         kwargs: dict,
                                         label: str = None) -> object:
        """
        Returns the object generated from func with func_args parameters. When exist the cache file
        containing target object, resume method does not given func and load the object from cache
        file.

        Parameters
        ----------
        func : Callable
            function to generate result object
        args : list
            parameters of the func.
        kwargs : dict
            parameters of the func.
        label : str
            Prefix of the cache file generated by hideout.

        Returns
        -------
        object : object
        """
        file_path = generate_path_for_decorator(func, args, kwargs, label)
        if env.HIDEOUT_ENABLE_CACHE and self.stage not in env.HIDEOUT_SKIP_STAGES:
            logger.info("specified cache file: {}".format(file_path))
            if os.path.exists(file_path):
                logger.info("found {} ...".format(file_path))
                with open(file_path, mode='rb') as f:
                    return pickle.load(f)
            else:
                logger.info("not found cache file...")
        logger.info("generating with func")
        return self._generate_from_function_for_decorator(file_path, func, args, kwargs)

    def _generate_from_function_for_decorator(self, file_path, func, args, kwargs):
        if len(args) == 0 and len(kwargs):
            result = func()
        else:
            result = func(*args, **kwargs)
        self._postprocess(result, file_path)
        return result

    def _generate_from_function(self, file_path, func, func_args):
        if len(func_args) == 0:
            result = func()
        else:
            result = func(**func_args)
        self._postprocess(result, file_path)
        return result

    def _postprocess(self, result, file_path) -> None:
        if result is not None:
            logger.info("freezing object to {} ...".format(file_path))
            freeze(result, file_path, self.stage)
        else:
            raise RuntimeError("Any object is loaded ...")
